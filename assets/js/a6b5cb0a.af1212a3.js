"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[40872],{95788:(e,a,n)=>{n.d(a,{Iu:()=>l,yg:()=>g});var t=n(11504);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function s(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?s(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function d(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=t.createContext({}),p=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},l=function(e){var a=p(e.components);return t.createElement(i.Provider,{value:a},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},h=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),c=p(n),h=r,g=c["".concat(i,".").concat(h)]||c[h]||u[h]||s;return n?t.createElement(g,o(o({ref:a},l),{},{components:n})):t.createElement(g,o({ref:a},l))}));function g(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=h;var d={};for(var i in a)hasOwnProperty.call(a,i)&&(d[i]=a[i]);d.originalType=e,d[c]="string"==typeof e?e:r,o[1]=d;for(var p=2;p<s;p++)o[p]=n[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}h.displayName="MDXCreateElement"},16540:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>d,toc:()=>p});var t=n(45072),r=(n(11504),n(95788));const s={id:"headers",title:"Headers"},o=void 0,d={unversionedId:"zio-http/dsl/headers",id:"zio-http/dsl/headers",title:"Headers",description:"ZIO HTTP provides support for all HTTP headers (as defined",source:"@site/docs/zio-http/dsl/headers.md",sourceDirName:"zio-http/dsl",slug:"/zio-http/dsl/headers",permalink:"/zio-http/dsl/headers",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/dsl/headers.md",tags:[],version:"current",frontMatter:{id:"headers",title:"Headers"},sidebar:"ecosystem-sidebar",previous:{title:"Body",permalink:"/zio-http/dsl/body"},next:{title:"Cookies",permalink:"/zio-http/dsl/cookies"}},i={},p=[{value:"Server-side",id:"server-side",level:2},{value:"Attaching Headers to <code>Response</code>",id:"attaching-headers-to-response",level:3},{value:"Reading Headers from <code>Request</code>",id:"reading-headers-from-request",level:3},{value:"Client-side",id:"client-side",level:2},{value:"Adding headers to <code>Request</code>",id:"adding-headers-to-request",level:3},{value:"Reading headers from <code>Response</code>",id:"reading-headers-from-response",level:3},{value:"Headers DSL",id:"headers-dsl",level:2}],l={toc:p},c="wrapper";function u(e){let{components:a,...n}=e;return(0,r.yg)(c,(0,t.c)({},l,n,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"ZIO HTTP")," provides support for all HTTP headers (as defined\nin ",(0,r.yg)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/rfc2616"},"RFC2616")," ) along with custom headers."),(0,r.yg)("h2",{id:"server-side"},"Server-side"),(0,r.yg)("h3",{id:"attaching-headers-to-response"},"Attaching Headers to ",(0,r.yg)("inlineCode",{parentName:"h3"},"Response")),(0,r.yg)("p",null,"On the server-side, ",(0,r.yg)("inlineCode",{parentName:"p"},"ZIO-HTTP")," is adding a collection of pre-defined headers to the response, according to the HTTP\nspecification, additionally, users may add other headers, including custom headers."),(0,r.yg)("p",null,"There are multiple ways to attach headers to a response:"),(0,r.yg)("p",null,"Using ",(0,r.yg)("inlineCode",{parentName:"p"},"addHeaders")," helper on response:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"})),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.http._\n\nResponse.ok.addHeader(Header.ContentLength(0L))\n// res0: Response = Response(\n//   status = Ok,\n//   headers = Iterable(ContentLength(length = 0L)),\n//   body = Body.empty\n// )\n")),(0,r.yg)("p",null,"Through ",(0,r.yg)("inlineCode",{parentName:"p"},"Response")," constructors:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"Response(\n  status = Status.Ok,\n  // Setting response header \n  headers = Headers(Header.ContentLength(0L)),\n  body = Body.empty\n)\n// res1: Response = Response(\n//   status = Ok,\n//   headers = Iterable(ContentLength(length = 0L)),\n//   body = Body.empty\n// )\n")),(0,r.yg)("p",null,"Using ",(0,r.yg)("inlineCode",{parentName:"p"},"Middlewares"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import Middleware.addHeader\n\nRoutes(Method.GET / "hello" -> Handler.ok) @@ addHeader(Header.ContentLength(0L))\n// res2: Routes[Any, Nothing] = zio.http.Routes@6a9e88f1\n')),(0,r.yg)("h3",{id:"reading-headers-from-request"},"Reading Headers from ",(0,r.yg)("inlineCode",{parentName:"h3"},"Request")),(0,r.yg)("p",null,"On the Server-side you can read Request headers as given below"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'Routes(\n  Method.GET / "streamOrNot" -> handler { (req: Request) =>\n    Response.text(req.headers.map(_.toString).mkString("\\n"))\n  }\n)\n// res3: Routes[Any, Nothing] = zio.http.Routes@22edca96\n')),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("b",null,"Detailed examples ")),(0,r.yg)("p",null,"Example below shows how the Headers could be added to a response by using ",(0,r.yg)("inlineCode",{parentName:"p"},"Response")," constructors and how a custom\nheader is added to ",(0,r.yg)("inlineCode",{parentName:"p"},"Response")," through ",(0,r.yg)("inlineCode",{parentName:"p"},"addHeader"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.http._\nimport zio.stream._\n\nobject SimpleResponseDispatcher extends ZIOAppDefault {\n  override def run =\n  // Starting the server (for more advanced startup configuration checkout `HelloWorldAdvanced`)\n    Server.serve(app).provide(Server.default)\n\n  // Create a message as a Chunk[Byte]\n  val message = Chunk.fromArray("Hello world !\\r\\n".getBytes(Charsets.Http))\n  // Use `Http.collect` to match on route\n  val app: HttpApp[Any] =\n    Routes(\n      // Simple (non-stream) based route\n      Method.GET / "health" -> handler(Response.ok),\n\n      // From Request(req), the headers are accessible.\n      Method.GET / "streamOrNot" -> \n        handler { (req: Request) => \n          // Checking if client is able to handle streaming response\n          val acceptsStreaming: Boolean = req.header(Header.Accept).exists(_.mimeTypes.contains(Header.Accept.MediaTypeWithQFactor(MediaType.application.`octet-stream`, None)))\n          if (acceptsStreaming)\n            Response(\n              status = Status.Ok,\n              // Setting response header \n              headers = Headers(Header.ContentLength(message.length.toLong)), // adding CONTENT-LENGTH header\n              body = Body.fromStream(ZStream.fromChunk(message)), // Encoding content using a ZStream\n            )\n          else {\n            // Adding a custom header to Response\n            Response(status = Status.Accepted, body = Body.fromChunk(message)).addHeader("X-MY-HEADER", "test")\n          }\n        }\n    ).sandbox.toHttpApp\n}\n\n')),(0,r.yg)("p",null,"More examples:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/zio/zio-http/blob/main/example/src/main/scala/Middleware.scala"},"Middleware")))),(0,r.yg)("h2",{id:"client-side"},"Client-side"),(0,r.yg)("h3",{id:"adding-headers-to-request"},"Adding headers to ",(0,r.yg)("inlineCode",{parentName:"h3"},"Request")),(0,r.yg)("p",null,"ZIO-HTTP provides a simple way to add headers to a client ",(0,r.yg)("inlineCode",{parentName:"p"},"Request"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'val headers = Headers(Header.Host("sports.api.decathlon.com"), Header.Accept(MediaType.application.json))\nClient.request(Request.get("http://sports.api.decathlon.com/test").addHeaders(headers))\n')),(0,r.yg)("h3",{id:"reading-headers-from-response"},"Reading headers from ",(0,r.yg)("inlineCode",{parentName:"h3"},"Response")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'Client.request(Request.get("http://sports.api.decathlon.com/test")).map(_.headers)\n')),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("b",null,"Detailed examples")," "),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"The sample below shows how a header could be added to a client request:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.http._\n\nobject SimpleClientJson extends ZIOAppDefault {\n  val url = "http://sports.api.decathlon.com/groups/water-aerobics"\n  // Construct headers\n  val headers = Headers(Header.Host("sports.api.decathlon.com"), Header.Accept(MediaType.application.json))\n\n  val program = for {\n    // Pass headers to request\n    res <- Client.request(Request.get(url).addHeaders(headers))\n    // List all response headers\n    _ <- Console.printLine(res.headers.toList.mkString("\\n"))\n    data <-\n      // Check if response contains a specified header with a specified value.\n      if (res.header(Header.ContentType).exists(_.mediaType == MediaType.application.json))\n        res.body.asString\n      else\n        res.body.asString\n    _ <- Console.printLine(data)\n  } yield ()\n\n  override def run =\n    program.provide(Client.default, Scope.default)\n\n}\n'))),(0,r.yg)("h2",{id:"headers-dsl"},"Headers DSL"),(0,r.yg)("p",null,"Headers DSL provides plenty of powerful operators that can be used to add, remove, modify and verify headers. Headers\nAPIs could be used on client, server, and middleware."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"zio.http.Headers")," - represents an immutable collection of headers\n",(0,r.yg)("inlineCode",{parentName:"p"},"zio.http.Header"),"  - a collection of all the standard headers"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"Headers")," have following type of helpers"),(0,r.yg)("p",null,"Constructors - Provides a list of helpful methods that can create ",(0,r.yg)("inlineCode",{parentName:"p"},"Headers"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'// create a simple Accept header:\nHeaders(Header.Accept(MediaType.application.json))\n// res6: Headers = Iterable(\n//   Accept(\n//     mimeTypes = NonEmptyChunk(MediaTypeWithQFactor(MediaType(application,json,true,true,List(json, map),Map(),Map()),None))\n//   )\n// )\n\n// create a basic authentication header:\nHeaders(Header.Authorization.Basic("username", "password"))\n// res7: Headers = Iterable(\n//   Basic(username = "username", password = "password")\n// )\n')),(0,r.yg)("p",null,"Getters - Provides a list of operators that parse and extract data from the ",(0,r.yg)("inlineCode",{parentName:"p"},"Headers"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'// retrieving the value of Accept header value:\nval acceptHeader: Headers = Headers(Header.Accept(MediaType.application.json))\n// acceptHeader: Headers = Iterable(\n//   Accept(\n//     mimeTypes = NonEmptyChunk(MediaTypeWithQFactor(MediaType(application,json,true,true,List(json, map),Map(),Map()),None))\n//   )\n// )\nval acceptHeaderValue: Option[CharSequence] = acceptHeader.header(Header.Accept).map(_.renderedValue)\n// acceptHeaderValue: Option[CharSequence] = Some(value = "application/json")\n\n\n// retrieving a bearer token from Authorization header:\nval authorizationHeader: Headers = Headers(Header.Authorization.Bearer("test"))\n// authorizationHeader: Headers = Iterable(Bearer(token = "test"))\nval authorizationHeaderValue: Option[String] = acceptHeader.header(Header.Authorization).map(_.renderedValue)\n// authorizationHeaderValue: Option[String] = None\n')),(0,r.yg)("p",null,"Modifiers - Provides a list of operators that modify the current ",(0,r.yg)("inlineCode",{parentName:"p"},"Headers"),". Once modified, a new instance of the same\ntype is returned."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"// add Accept header:\nHeaders.empty.addHeader(Header.Accept(MediaType.application.json))\n// res8: Headers = Iterable(\n//   Accept(\n//     mimeTypes = NonEmptyChunk(MediaTypeWithQFactor(MediaType(application,json,true,true,List(json, map),Map(),Map()),None))\n//   )\n// )\n")),(0,r.yg)("p",null,"Checks - Provides a list of operators that checks if the ",(0,r.yg)("inlineCode",{parentName:"p"},"Headers")," meet the give constraints."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'val contentTypeHeader: Headers = Headers(Header.ContentType(MediaType.application.json))\n// contentTypeHeader: Headers = Iterable(\n//   ContentType(\n//     mediaType = MediaType(\n//       mainType = "application",\n//       subType = "json",\n//       compressible = true,\n//       binary = true,\n//       fileExtensions = List("json", "map"),\n//       extensions = Map(),\n//       parameters = Map()\n//     ),\n//     boundary = None,\n//     charset = None\n//   )\n// )\nval isHeaderPresent: Boolean   = contentTypeHeader.hasHeader(Header.ContentType) \n// isHeaderPresent: Boolean = true \nval isJsonContentType: Boolean = contentTypeHeader.hasJsonContentType\n// isJsonContentType: Boolean = true\n')))}u.isMDXComponent=!0}}]);