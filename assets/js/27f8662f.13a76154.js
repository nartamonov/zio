"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[94880],{95788:(e,t,r)=>{r.d(t,{Iu:()=>l,yg:()=>f});var n=r(11504);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=c(r),d=o,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||a;return r?n.createElement(f,s(s({ref:t},l),{},{components:r})):n.createElement(f,s({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},46172:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var n=r(45072),o=(r(11504),r(95788));const a={id:"https-server",title:"Https Server Example",sidebar_label:"Https Server"},s=void 0,i={unversionedId:"zio-http/examples/basic/https-server",id:"zio-http/examples/basic/https-server",title:"Https Server Example",description:"",source:"@site/docs/zio-http/examples/basic/https-server.md",sourceDirName:"zio-http/examples/basic",slug:"/zio-http/examples/basic/https-server",permalink:"/zio-http/examples/basic/https-server",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/examples/basic/https-server.md",tags:[],version:"current",frontMatter:{id:"https-server",title:"Https Server Example",sidebar_label:"Https Server"},sidebar:"ecosystem-sidebar",previous:{title:"Http Server",permalink:"/zio-http/examples/basic/http-server"},next:{title:"WebSocket",permalink:"/zio-http/examples/basic/websocket"}},p={},c=[],l={toc:c},u="wrapper";function m(e){let{components:t,...r}=e;return(0,o.yg)(u,(0,n.c)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\nimport zio.http._\n\nobject HttpsHelloWorld extends ZIOAppDefault {\n  // Create HTTP route\n  val app: HttpApp[Any] = Routes(\n    Method.GET / "text" -> handler(Response.text("Hello World!")),\n    Method.GET / "json" -> handler(Response.json("""{"greetings": "Hello World!"}""")),\n  ).toHttpApp\n\n  /**\n   * In this example, a private key and certificate are loaded from resources.\n   * For testing this example with curl, make sure the private key "server.key",\n   * and the certificate "server.crt" are inside the resources directory,\n   * which is by default "src/main/resources".\n   *\n   * You can use the following command to create a self-signed TLS certificate.\n   * This command will create two files: "server.key" and "server.crt".\n   *\n   *     openssl req -x509 -newkey rsa:4096 -sha256 -days 365 -nodes \\\n   *       -keyout server.key -out server.crt \\\n   *       -subj "/CN=example.com/OU=?/O=?/L=?/ST=?/C=??" \\\n   *       -addext "subjectAltName=DNS:example.com,DNS:www.example.com,IP:10.0.0.1"\n   */\n\n  val sslConfig = SSLConfig.fromResource(\n    behaviour = SSLConfig.HttpBehaviour.Accept,\n    certPath = "server.crt",\n    keyPath = "server.key",\n  )\n\n  private val config = Server.Config.default\n    .port(8090)\n    .ssl(sslConfig)\n\n  private val configLayer = ZLayer.succeed(config)\n\n  override val run =\n    Server.serve(app).provide(configLayer, Server.live)\n\n}\n\n')))}m.isMDXComponent=!0}}]);