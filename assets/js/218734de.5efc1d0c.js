"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[75852],{95788:(e,t,n)=>{n.d(t,{Iu:()=>c,yg:()=>m});var a=n(11504);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,m=u["".concat(p,".").concat(d)]||u[d]||g[d]||o;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},16172:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(45072),r=(n(11504),n(95788));const o={id:"getting-started",title:"Getting Started"},i=void 0,l={unversionedId:"zio-http/getting-started",id:"zio-http/getting-started",title:"Getting Started",description:"ZIO HTTP is a powerful library that is used to build highly performant HTTP-based services and clients using functional scala and ZIO and uses Netty as its core.",source:"@site/docs/zio-http/getting-started.md",sourceDirName:"zio-http",slug:"/zio-http/getting-started",permalink:"/zio-http/getting-started",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/getting-started.md",tags:[],version:"current",frontMatter:{id:"getting-started",title:"Getting Started"},sidebar:"ecosystem-sidebar",previous:{title:"Setup",permalink:"/zio-http/setup"},next:{title:"ZIO Http",permalink:"/zio-http/"}},p={},s=[{value:"Http and Handler",id:"http-and-handler",level:2},{value:"Creating a &quot;<em>Hello World</em>&quot; app",id:"creating-a-hello-world-app",level:3},{value:"Routing",id:"routing",level:3},{value:"Composition",id:"composition",level:3},{value:"ZIO Integration",id:"zio-integration",level:3},{value:"Accessing the Request",id:"accessing-the-request",level:3},{value:"Testing",id:"testing",level:3},{value:"Socket",id:"socket",level:2},{value:"Creating a socket app",id:"creating-a-socket-app",level:3},{value:"Server",id:"server",level:2},{value:"Starting an HTTP App",id:"starting-an-http-app",level:3},{value:"Examples",id:"examples",level:2}],c={toc:s},u="wrapper";function g(e){let{components:t,...n}=e;return(0,r.yg)(u,(0,a.c)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"ZIO HTTP")," is a powerful library that is used to build highly performant HTTP-based services and clients using functional scala and ZIO and uses ",(0,r.yg)("a",{parentName:"p",href:"https://netty.io/"},"Netty")," as its core."),(0,r.yg)("p",null,"ZIO HTTP has powerful functional domains that help in creating, modifying, composing apps easily. Let's start with the HTTP domain."),(0,r.yg)("p",null,"The first step when using ZIO HTTP is creating an HTTP app."),(0,r.yg)("h2",{id:"http-and-handler"},"Http and Handler"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"Handler")," describes the transformation from an incoming ",(0,r.yg)("inlineCode",{parentName:"p"},"Request")," to an outgoing ",(0,r.yg)("inlineCode",{parentName:"p"},"Response")," type. The ",(0,r.yg)("inlineCode",{parentName:"p"},"HttpApp"),"\ntype on top of this  provides input-dependent routing to different ",(0,r.yg)("inlineCode",{parentName:"p"},"Handler")," values. There are some default\nhandler constructors such as ",(0,r.yg)("inlineCode",{parentName:"p"},"Handler.text"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"Handler.html"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"Handler.fromFile"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"Handler.fromData"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"Handler.fromStream"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"Handler.fromEffect"),"."),(0,r.yg)("p",null,"A ",(0,r.yg)("inlineCode",{parentName:"p"},"Handler")," can always be transformed to a ",(0,r.yg)("inlineCode",{parentName:"p"},"HttpApp")," value using the ",(0,r.yg)("inlineCode",{parentName:"p"},".toHttpApp")," method, in which case the\nHTTP application will handle all routes."),(0,r.yg)("h3",{id:"creating-a-hello-world-app"},'Creating a "',(0,r.yg)("em",{parentName:"h3"},"Hello World"),'" app'),(0,r.yg)("p",null,'Creating an HTTP app using ZIO HTTP is as simple as given below, this app will always respond with "Hello World!"'),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\n\nval app = Handler.text("Hello World!").toHttpApp\n')),(0,r.yg)("p",null,"An application can be made using any of the available operators on ",(0,r.yg)("inlineCode",{parentName:"p"},"HttpApp"),". In the above program for any Http request, the response is always ",(0,r.yg)("inlineCode",{parentName:"p"},'"Hello World!"'),"."),(0,r.yg)("h3",{id:"routing"},"Routing"),(0,r.yg)("p",null,"For handling routes, ZIO HTTP has a ",(0,r.yg)("inlineCode",{parentName:"p"},"Routes")," value, which allows you to aggregate a collection of\nindividual routes."),(0,r.yg)("p",null,"Behind the scenes, ZIO HTTP builds an efficient prefix-tree whenever needed to optimize dispatch."),(0,r.yg)("p",null,"The example below shows how to create routes:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\n\nval routes = Routes(\n  Method.GET / "fruits" / "a" -> handler(Response.text("Apple")),\n  Method.GET / "fruits" / "b" -> handler(Response.text("Banana"))\n)\n')),(0,r.yg)("p",null,"You can create parameterized routes as well:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\n\nval routes = Routes(\n  Method.GET / "Apple" / int("count") ->\n    handler { (count: Int, req: Request) =>\n      Response.text(s"Apple: $count")\n    }\n)\n')),(0,r.yg)("h3",{id:"composition"},"Composition"),(0,r.yg)("p",null,"Routes can be composed using the ",(0,r.yg)("inlineCode",{parentName:"p"},"++")," operator, which works by combining the routes."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\n\nval a = Routes(Method.GET / "a" -> Handler.ok)\nval b = Routes(Method.GET / "b" -> Handler.ok)\n\nval routes = a ++ b\n')),(0,r.yg)("h3",{id:"zio-integration"},"ZIO Integration"),(0,r.yg)("p",null,"For creating effectful apps, you can use handlers that return ZIO effects:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\nimport zio._\n\nval routes = Routes(\n  Method.GET / "hello" -> handler(ZIO.succeed(Response.text("Hello World")))\n)\n')),(0,r.yg)("h3",{id:"accessing-the-request"},"Accessing the Request"),(0,r.yg)("p",null,"To access the request, just create a handler that accepts the request:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\nimport zio._\n\nval routes = Routes(\n  Method.GET / "fruits" / "a" -> handler { (req: Request) =>\n    Response.text("URL:" + req.url.path.toString + " Headers: " + req.headers)\n  },\n\n  Method.POST / "fruits" / "a" -> handler { (req: Request) =>\n    req.body.asString.map(Response.text(_))\n  }\n)\n')),(0,r.yg)("h3",{id:"testing"},"Testing"),(0,r.yg)("p",null,"You can run ",(0,r.yg)("inlineCode",{parentName:"p"},"HttpApp")," as a function of ",(0,r.yg)("inlineCode",{parentName:"p"},"A => ZIO[R, Response, Response]")," to test it by using the ",(0,r.yg)("inlineCode",{parentName:"p"},"runZIO")," method."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.test._\nimport zio.test.Assertion.equalTo\nimport zio.http._\n\nobject Spec extends ZIOSpecDefault {\n\n  def spec = suite("http")(\n    test("should be ok") {\n      val app = Handler.ok.toHttpApp\n      val req = Request.get(URL(Root))\n      assertZIO(app.runZIO(req))(equalTo(Response.ok))\n    }\n  )\n}\n')),(0,r.yg)("h2",{id:"socket"},"Socket"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"Socket")," is functional domain in ZIO HTTP. It provides constructors to create socket apps. A socket app is\nan app that handles WebSocket connections."),(0,r.yg)("h3",{id:"creating-a-socket-app"},"Creating a socket app"),(0,r.yg)("p",null,"Socket app can be created by using ",(0,r.yg)("inlineCode",{parentName:"p"},"Socket")," constructors. To create a socket app, you need to create a socket that accepts ",(0,r.yg)("inlineCode",{parentName:"p"},"WebSocketChannel")," and produces ",(0,r.yg)("inlineCode",{parentName:"p"},"ZIO"),". Finally, we need to convert socketApp to ",(0,r.yg)("inlineCode",{parentName:"p"},"Response")," using ",(0,r.yg)("inlineCode",{parentName:"p"},"toResponse"),", so that we can run it like any other HTTP app.   "),(0,r.yg)("p",null,'The below example shows a simple socket app,  which sends WebsSocketTextFrame "\nBAR" on receiving WebsSocketTextFrame "FOO".'),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\nimport zio.stream._\nimport zio._\n\nval socket =\n  Handler.webSocket { channel =>\n    channel.receiveAll {\n      case ChannelEvent.Read(WebSocketFrame.Text("FOO")) =>\n        channel.send(ChannelEvent.Read(WebSocketFrame.text("BAR")))\n      case _ =>\n        ZIO.unit\n    }\n  }\n\nval routes = \n  Routes(\n    Method.GET / "greet" / string("name") -> handler { (name: String, req: Request) => \n      Response.text(s"Greetings {$name}!")\n    },\n    Method.GET / "ws" -> handler(socket.toResponse)\n  )\n')),(0,r.yg)("h2",{id:"server"},"Server"),(0,r.yg)("p",null,"As we have seen how to create HTTP apps, the only thing left is to run an HTTP server and serve requests.\nZIO HTTP provides a way to set configurations for your server. The server can be configured according to the leak detection level, request size, address etc."),(0,r.yg)("h3",{id:"starting-an-http-app"},"Starting an HTTP App"),(0,r.yg)("p",null,"To launch our app, we need to start the server on a port. The below example shows a simple HTTP app that responds with empty content and a ",(0,r.yg)("inlineCode",{parentName:"p"},"200")," status code, deployed on port ",(0,r.yg)("inlineCode",{parentName:"p"},"8090")," using ",(0,r.yg)("inlineCode",{parentName:"p"},"Server.start"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"import zio.http._\nimport zio._\n\nobject HelloWorld extends ZIOAppDefault {\n  val app = Handler.ok.toHttpApp\n\n  override def run =\n    Server.serve(app).provide(Server.defaultWithPort(8090))\n}\n")),(0,r.yg)("h2",{id:"examples"},"Examples"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/zio/zio-http/blob/main/zio-http-example/src/main/scala/example/HelloWorld.scala"},"HTTP Server")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/zio/zio-http/blob/main/zio-http-example/src/main/scala/example/WebSocketEcho.scala"},"WebSocket Server")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/zio/zio-http/blob/main/zio-http-example/src/main/scala/example/RequestStreaming.scala"},"Streaming Response")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/zio/zio-http/blob/main/zio-http-example/src/main/scala/example/HttpsClient.scala"},"HTTP Client")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/zio/zio-http/blob/main/zio-http-example/src/main/scala/example/FileStreaming.scala"},"File Streaming")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/zio/zio-http/blob/main/zio-http-example/src/main/scala/example/AuthenticationServer.scala"},"Authentication")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/zio/zio-http/tree/main/zio-http-example/src/main/scala/example"},"All examples"))))}g.isMDXComponent=!0}}]);