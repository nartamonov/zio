"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[91256],{95788:(e,o,n)=>{n.d(o,{Iu:()=>l,yg:()=>f});var r=n(11504);function t(e,o,n){return o in e?Object.defineProperty(e,o,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[o]=n,e}function a(e,o){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);o&&(r=r.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var o=1;o<arguments.length;o++){var n=null!=arguments[o]?arguments[o]:{};o%2?a(Object(n),!0).forEach((function(o){t(e,o,n[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(n,o))}))}return e}function i(e,o){if(null==e)return{};var n,r,t=function(e,o){if(null==e)return{};var n,r,t={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],o.indexOf(n)>=0||(t[n]=e[n]);return t}(e,o);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],o.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var s=r.createContext({}),d=function(e){var o=r.useContext(s),n=o;return e&&(n="function"==typeof e?e(o):c(c({},o),e)),n},l=function(e){var o=d(e.components);return r.createElement(s.Provider,{value:o},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var o=e.children;return r.createElement(r.Fragment,{},o)}},m=r.forwardRef((function(e,o){var n=e.components,t=e.mdxType,a=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=d(n),m=t,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||a;return n?r.createElement(f,c(c({ref:o},l),{},{components:n})):r.createElement(f,c({ref:o},l))}));function f(e,o){var n=arguments,t=o&&o.mdxType;if("string"==typeof e||t){var a=n.length,c=new Array(a);c[0]=m;var i={};for(var s in o)hasOwnProperty.call(o,s)&&(i[s]=o[s]);i.originalType=e,i[p]="string"==typeof e?e:t,c[1]=i;for(var d=2;d<a;d++)c[d]=n[d];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},50708:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>s,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var r=n(45072),t=(n(11504),n(95788));const a={id:"protobuf",title:"Protobuf Codecs",sidebar_label:"Protobuf"},c=void 0,i={unversionedId:"zio-schema/derivations/codecs/protobuf",id:"zio-schema/derivations/codecs/protobuf",title:"Protobuf Codecs",description:"Introduction",source:"@site/docs/zio-schema/derivations/codecs/protobuf.md",sourceDirName:"zio-schema/derivations/codecs",slug:"/zio-schema/derivations/codecs/protobuf",permalink:"/zio-schema/derivations/codecs/protobuf",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-schema/derivations/codecs/protobuf.md",tags:[],version:"current",frontMatter:{id:"protobuf",title:"Protobuf Codecs",sidebar_label:"Protobuf"},sidebar:"ecosystem-sidebar",previous:{title:"MessagePack",permalink:"/zio-schema/derivations/codecs/message-pack"},next:{title:"Mapping DTO to Domain Object",permalink:"/zio-schema/examples/mapping-dto-to-domain-object"}},s={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"BinaryCodec",id:"binarycodec",level:2},{value:"Example: BinaryCodec",id:"example-binarycodec",level:2},{value:"Example: Streaming Codecs",id:"example-streaming-codecs",level:2}],l={toc:d},p="wrapper";function u(e){let{components:o,...n}=e;return(0,t.yg)(p,(0,r.c)({},l,n,{components:o,mdxType:"MDXLayout"}),(0,t.yg)("h2",{id:"introduction"},"Introduction"),(0,t.yg)("p",null,"Protocol Buffers (protobuf) is a binary serialization format developed by Google. It is designed for efficient data exchange between different systems and languages. In this article, we will explore how to derive Protobuf codecs from a ZIO Schema. Protobuf codecs allow us to easily serialize and deserialize data in Protobuf format, making it simple to interact with APIs and data sources that use Protobuf as their data format."),(0,t.yg)("h2",{id:"installation"},"Installation"),(0,t.yg)("p",null,"To start using Protobuf codecs in ZIO, you need to add the following dependency to your build.sbt file:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "dev.zio" %% "zio-schema-protobuf" % "0.4.15"\n')),(0,t.yg)("h2",{id:"binarycodec"},"BinaryCodec"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"ProtobufCodec")," object inside the ",(0,t.yg)("inlineCode",{parentName:"p"},"zio.schema.codec")," package provides the ",(0,t.yg)("inlineCode",{parentName:"p"},"protobufCodec")," operator which allows us to derive Protobuf codecs from a ZIO Schema:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},"object ProtobufCodec {\n  implicit def protobufCodec[A](implicit schema: Schema[A]): BinaryCodec[A] = ???\n}\n")),(0,t.yg)("h2",{id:"example-binarycodec"},"Example: BinaryCodec"),(0,t.yg)("p",null,"Let's try an example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.schema.codec._\nimport zio.schema.{DeriveSchema, Schema}\n\ncase class Person(name: String, age: Int)\n\nobject Person {\n  implicit val schema       : Schema[Person]      =\n    DeriveSchema.gen\n  implicit val protobufCodec: BinaryCodec[Person] =\n    ProtobufCodec.protobufCodec(schema)\n}\n\nobject Main extends ZIOAppDefault {\n  def run = for {\n    _ <- ZIO.debug("Protobuf Codec Example:")\n    person: Person = Person("John", 42)\n    encoded: Chunk[Byte] = Person.protobufCodec.encode(person)\n    _ <- ZIO.debug(\n      s"person object encoded to Protobuf\'s binary format: ${toHex(encoded)}"\n    )\n    decoded <- ZIO.fromEither(Person.protobufCodec.decode(encoded))\n    _ <- ZIO.debug(s"Protobuf object decoded to Person class: $decoded")\n  } yield ()\n\n  def toHex(bytes: Chunk[Byte]): String =\n    bytes.map("%02x".format(_)).mkString(" ")\n}\n')),(0,t.yg)("p",null,"Here is the output of running the above program:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},"Protobuf Codec Example:\nperson object encoded to Protobuf's binary format: 0a 04 4a 6f 68 6e 10 2a\nProtobuf object decoded to Person class: Person(John,42)\n")),(0,t.yg)("h2",{id:"example-streaming-codecs"},"Example: Streaming Codecs"),(0,t.yg)("p",null,"The following example shows how to use Protobuf codecs to encode and decode streams of data:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.schema.codec.{BinaryCodec, ProtobufCodec}\nimport zio.schema.{DeriveSchema, Schema}\nimport zio.stream.ZStream\n\ncase class Person(name: String, age: Int)\n\nobject Person {\n  implicit val schema: Schema[Person] =\n    DeriveSchema.gen\n  implicit val protobufCodec: BinaryCodec[Person] =\n    ProtobufCodec.protobufCodec(schema)\n}\n\nobject Main extends ZIOAppDefault {\n\n  def run = for {\n    _ <- ZIO.debug("Protobuf Stream Codecs Example:")\n    person = Person("John", 42)\n\n    personToProto = Person.protobufCodec.streamEncoder\n    protoToPerson = Person.protobufCodec.streamDecoder\n\n    newPerson <- ZStream(person)\n      .via(personToProto)\n      .via(protoToPerson)\n      .runHead\n      .some\n      .catchAll(error => ZIO.debug(error))\n    _ <- ZIO.debug(\n      "is old person the new person? " + (person == newPerson).toString\n    )\n    _ <- ZIO.debug("old person: " + person)\n    _ <- ZIO.debug("new person: " + newPerson)\n  } yield ()\n}\n')),(0,t.yg)("p",null,"The output of running the above program is:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},"Protobuf Stream Codecs Example:\nis old person the new person? true\nold person: Person(John,42)\nnew person: Person(John,42)\n")))}u.isMDXComponent=!0}}]);